/**
 * 二进制处理
 * 输入一个整数，输出该数二进制表示中1的个数。其中负数用补码表示
 * 
 * 复习二进制位运算
 * 
 * 或运算符 or（符号为 | ）：若2个二进制位都为 0 ，则返回 0，否则返回1
 * 与运算符 and（符号为 & ）：2个二进制位都为1则为1，否则 0；
 * 否运算符 not（符号为 ～）：二进制位取反
 * 异或运算符 xor（符号为 ^）：2个二进制位不同则返回 1，否则 0；
 * 左移运算符m << n ,把m向左移n位，左移n位的时候，左边的n位将被丢弃，
 * 同时在右边补上 n 个0， 比如 00001010<<2 = 00101000
 * 右移运算符 m >> n,把m向右移动n位，右边的n位将被丢弃，同时左边补上n个0.
 * 例子：00001010>>2 = 00000010
 */

/**
 * 我们可以让目标数字和一个数字做与运算
 * 这个比较的数字必须又一位是1，其它位是0，这样就可以知道目标数字这一位是否为0
 * 所以用于比较的这个数初始值为1，比较完后让 1左移一位，这样就可以依次比较
 * 所有位是否为 1
 */
function numberOf1(n){
    let flag = 1;
    let count = 0
    while(flag){
        if(flag & n){
            count ++
        }
        flag = flag << 1
    }
    return count
}

function numberOf1(n){
    let count = 0;
    while(n !== 0 ){
        n = n & (n-1)
        count ++
    }
    return count
}
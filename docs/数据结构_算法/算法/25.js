/**
 * 请你来实现一个 atoi 函数，使其讲字符串转换为整数。 不要使用 parseInt
 * 
 * 首先，该函数会根据需要丢弃无用的开头字符，直到寻找到第一个非空的字符为止，
 * 接下来转化规则如下：
 * 
 * 如果第一个非空字符为 正负号，则将该符号与前面尽可能多的数字组合起来，行成一个整数
 * 假设第一个非空字符是数字，则直接与后面的数字字符组合起来
 * 该字符串在有效的整数之后也可能会存在多余的字符，那么这些多余的字符可以被忽略，他们
 * 不能对函数造成影响
 * 
 * 注意：假如改字符串中的第一个非空字符不是一个有效的整数字符、字符串为空或字符串仅包含
 * 空白字符时，则你的函数不需要进行转换，即无法进行有效的转换
 * 
 * 在任何情况下，在函数不能进行有效的转换时，请返回0
 * 
 * 提示：
 * 
 * 本题中空白字符只包括空格字符‘ ’
 * 假设我们的环境只能存储 32 位大小的有符号整数。那么其数值范围为 [-2^31, 2^31 - 1]
 * 如果数值超过这个范围请返回 INT_MAX[2^31 - 1] 或者 INT_MIN[-2^31]
 * 
 * 
 * 参考答案：
 * 方法1. 
 * 1. 先消除字符串前面的空白字符，知道找到第一个 - + 或 数字
 * 2. 如果剩下的开头是一个 -+ 符号，先用一个变量存放起来，然后把它截掉
 * 3. 如果输入的字符串是合法的，理论上现在开头就应该只剩下数字， 如果再出现 +- 号，
 * 就可以判定为不合法字符串
 * 4. 经过上面3步取到最后一个不是数字的地方停止，将这部分数字截取下来
 * 5. 结合数字和正负号，判断是否超过最大值或最小值
 */

var myAtoi = function(str){
    var sign = '+'
    var numReg = /^[0-9]/

    // 去掉前面的符号
    var i = 0;
    while(str.charAt(i) === ' ' && i < str.length){
        i++
    }
    str = str.slice(i)

    // 处理正负号
    if(str.startsWith('+')){
        str = str.slice(1)
    }else if(str.startsWith('-')){
        str = str.slice(1)
        sign = '-'
    }

    // 处理后面的字符串不是数字开头，代表不合适
    if(!numReg.test(str)) return 0;

    // 出现不是字符串的字符就中断
    var value = parseInt(sign + str)

    if(value > 2**31-1) {
        return 2**31 - 1
    }
    if(value < -1 * 2**31){
        return -1 * 2**31
    }
    return value
}
(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{215:function(s,t,a){"use strict";a.r(t);var n=a(28),r=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"函数式编程比较火热的库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数式编程比较火热的库"}},[s._v("#")]),s._v(" 函数式编程比较火热的库")]),s._v(" "),a("h2",{attrs:{id:"rxjs-functional-reactive-programming-【主攻】"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rxjs-functional-reactive-programming-【主攻】"}},[s._v("#")]),s._v(" Rxjs (functional reactive programming) 【主攻】")]),s._v(" "),a("p",[s._v("Rxjs 从诞生以来一直都不温补火，但是它函数响应式编程（Functional Reactive Programming, FRP）的理念非常先进，虽然或许对大部分应用环境来说，外部输入事件并不是太频繁，并不需要引入一个如此庞大的FRP 体系，但是我们可以了解以下它的优秀特性")]),s._v(" "),a("p",[s._v("在 Rxjs 中，所有的外部输入（用户输入、网络请求等）都被视作一种【事件流】：")]),s._v(" "),a("p",[s._v("用户点击按钮 =》 网络请求成功 =》 用户键盘输入 =》 某个定时事件发生 =》 这种事件流特别适合处理游戏，上上下下上上下下")]),s._v(" "),a("p",[s._v("举个例子，下面这段代码会监听点击事件，每2次点击事件产生一次事件响应：")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" clicks "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" Rx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Observable\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("fromEvent")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'click'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("bufferCount")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("subscribe")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("x")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v(" console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 打印出前2次点击事件")]),s._v("\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("响应式编程是继承自函数式编程，声明式的、不可变的、没有副作用的，是函数式编程的三大护法，其中不可变武功最高。一直使用面向对象范式编程的我们习惯了用变量存储和追踪程序的状态。Rxjs 从函数式编程范式中借鉴了很多东西，比如 链式函数调用，惰性求值等。")]),s._v(" "),a("p",[s._v("在函数中与函数作用域之外的一切事物有交互的就产生了副作用。比如读写文件，在控制台打印语句，修改页面元素的css等等。 在 Rxjs 中，把副作用问题推给了订阅者来解决。")]),s._v(" "),a("h2",{attrs:{id:"cyclejs"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cyclejs"}},[s._v("#")]),s._v(" cycleJS")]),s._v(" "),a("p",[s._v("cycle.js 是一个基于 Rxjs 的框架，它是一个彻彻底地的FRP 理念的框架，和React 一样，支持 virtual DOM 、JSX 语法，但现在似乎没有看到大型的应用经验")]),s._v(" "),a("p",[s._v("本质的讲，它就是在 Rxjs 的基础上加入了对 virtual DOM、容器和组件的支持，比如下面的一个简单的【开关】按钮：")]),s._v(" "),a("div",{staticClass:"language-jsx line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-jsx"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("sources")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" sinks "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("DOM")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" sources"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("DOM")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("select")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'input'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("events")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'click'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("map")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("ev")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v(" ev"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("target"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("checked"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("startWith")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("map")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("toggled")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v("\n                "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("div")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),a("span",{pre:!0,attrs:{class:"token plain-text"}},[s._v("\n                    ")]),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("input")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("type")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')]),s._v("checkbox"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')])]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("/>")])]),a("span",{pre:!0,attrs:{class:"token plain-text"}},[s._v(" Toggle me\n                    ")]),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("p")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" toggled "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'ON'")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'off'")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("</")]),s._v("p")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),a("span",{pre:!0,attrs:{class:"token plain-text"}},[s._v("\n                ")]),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("</")]),s._v("div")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" sinks"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" drivers "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("DOM")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("makeDOMDriver")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'#map'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("run")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("main "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" drivers"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br")])]),a("h2",{attrs:{id:"lodashjs、lazy-惰性求值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#lodashjs、lazy-惰性求值"}},[s._v("#")]),s._v(" lodashJS、lazy (惰性求值)")]),s._v(" "),a("p",[s._v("lodash 是一个具有一致接口、模块化、高性能等特性的 js工具库，是underscore 的 fork，其最初目的也是 “一致的跨浏览器行为，并改善性能”")]),s._v(" "),a("p",[s._v("lodash 采用延迟计算，意味着我们的链式方法在显式或者隐式的 value() 调用之前是不会执行的，因此 lodash 可以进行 shortcut (捷径)、fusion（融合）这样的优化，通过合并链式大大降低迭代的次数，从而大大提升执行性能。")]),s._v(" "),a("p",[s._v("就如同 jQuery 在全部函数前加全局的 $ 一样，lodash 使用全局的 _ 来提供对工具的快速访问")]),s._v(" "),a("h2",{attrs:{id:"underscorejs-fp"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#underscorejs-fp"}},[s._v("#")]),s._v(" underscoreJS (FP)")]),s._v(" "),a("p",[s._v("Underscore 是一个 js 工具库，它提供了一整套函数式编程的实用功能，但是没有扩展任何js 内置对象。它解决了这个问题 “如果我面对一个空白的 HTML 页面，并希望开始工作，我需要什么？”它弥补了 jquery 每有实现的功能，同时又是 Backbone 必不可少的部分。")]),s._v(" "),a("p",[s._v("Underscore 提供了 100 多个函数，包括常用的：map, filter, invoke 等，当然还有更多专业的辅助函数u，如：函数绑定、js模板功能、创建快速索引、强类型相等测试等。")]),s._v(" "),a("h2",{attrs:{id:"ramdajs"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ramdajs"}},[s._v("#")]),s._v(" ramdajs")]),s._v(" "),a("p",[s._v("ramda 是一个非常优秀的 js 工具库，跟同类比起来更 函数式，主要体现在：")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("ramda 里面提供的函数全部都是 curry 的，意味着函数没有默认参数可选参数，从而减轻函数的难度。")])]),s._v(" "),a("li",[a("p",[s._v("ramda 推崇 pointfree 简单的说，使用简单函数组合实现一个复杂的功能，而不是单独写一个函数操作临时变量")])]),s._v(" "),a("li",[a("p",[s._v("ramda 有个非常好用的参数占位符， R._ 大大减轻了函数在 pointfree 过程中参数位置的问题")])])]),s._v(" "),a("p",[s._v("相比 underscore 和 lodash 感觉要干净很多")]),s._v(" "),a("h3",{attrs:{id:"实际应用场景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实际应用场景"}},[s._v("#")]),s._v(" 实际应用场景")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("易调试、热部署、并发")])]),s._v(" "),a("li",[a("p",[s._v("单元测试")])])]),s._v(" "),a("h3",{attrs:{id:"总结与补充"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结与补充"}},[s._v("#")]),s._v(" 总结与补充")]),s._v(" "),a("p",[s._v("函数式编程不应被视为灵丹妙药。相反，它应该被视为我们现有工具箱的一个很自然的补充 --- 它带来了更高的可组性、灵活性及容错性。现代的js库已经开始尝试拥抱函数式编程的概念，以获取这些优势。 Redux 作为一种 flux 的变种实现，核心理念也是状态机制和函数式编程。")]),s._v(" "),a("p",[s._v("函数对外部的依赖是造成系统复杂度大大提高的主要原因。所以我们要尽可能地让函数保持干净。")]),s._v(" "),a("p",[s._v("大多数人或许都没有机会在生产环境中自己去实现 Maybe、Either、IO 这样玩具级 Functor ，但是通过了解他们的特性会产生函数式编程的意识。")]),s._v(" "),a("p",[s._v("软件工程上讲【没有银弹】，函数式编程同样也不是万能的，它与烂大街的 OOP 一样，只是一种编程范式而已。很多实际应用中是很难用函数式去表达的，选择 OOP 或者其它编程范式或许会更简单。但是我们注意到函数式编程的核心概念，如果说 OOP 是降低复杂度良好的封装、继承、多态以及接口定义的话，那么函数式编程就是通过函数以及他们的组合、柯里化、Functor等技术来降低系统复杂度，而 react、 Rxjs、Cyclejs 正是这种理念的代言。")])])}),[],!1,null,null,null);t.default=r.exports}}]);